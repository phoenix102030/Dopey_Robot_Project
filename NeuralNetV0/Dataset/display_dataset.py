"""
This script is used to visualize the bounding boxes of objects in images. The bounding boxes are defined in a CSV file generated by the VGG Image Annotator (VIA).

https://www.robots.ox.ac.uk/~vgg/software/via/via-1.0.6.html

Usage:
    Run this script in the same directory as the 'via_region_data.csv' file and the 'dataset_Dopey' directory containing the images.
    The script will display each image in a window along with the bounding boxes and class labels defined in the CSV file.
    Press any key to move on to the next image. Press Ctrl+C to exit the script.

Attributes:
    class_labels (dict): A dictionary mapping region_count values to class labels.
    annotations (dict): A dictionary mapping image filenames to lists of bounding box tuples.
    image_files (list): A list of image filenames in the 'dataset_Dopey' directory.
    
    i.e. folders should look like this 
    root.
    │   display_dataset.py
    │   via_region_data.csv
    │
    └───dataset_Dopey
            image_20240214-164916.png
            image_20240214-164937.png
            image_20240214-164942.png
            image_20240214-164950.png

Functions:
    draw_bboxes(image, bboxes): Draws bounding boxes and class labels on an image.

"""

import cv2
import csv
import json
import os


name_of_ds_folder = 'raw_dataset'
name_of_csv = 'via_region_data.csv'

# Define the class labels
class_labels = {0: 'nothing', 1: 'blue cube', 2: 'red ball'}

# Load the annotations from the CSV file
annotations = {}
with open(name_of_csv, 'r') as f:
    reader = csv.DictReader(f)
    for row in reader:
        filename = row['#filename']
        region_shape_attributes = json.loads(row['region_shape_attributes'])
        region_count = int(row['region_count'])
        if region_shape_attributes:
            x = region_shape_attributes['x']
            y = region_shape_attributes['y']
            width = region_shape_attributes['width']
            height = region_shape_attributes['height']
            clas = class_labels[region_count]
            bbox = (x, y, width, height, clas)
            if filename in annotations:
                annotations[filename].append(bbox)
            else:
                annotations[filename] = [bbox]

def draw_bboxes(image, bboxes): 
    """
    Draws bounding boxes and class labels on an image.

    Args:
        image (ndarray): The image on which to draw the bounding boxes.
        bboxes (list): A list of bounding box tuples.

    """
    for bbox in bboxes:
        x, y, w, h, clas = bbox
        cv2.rectangle(image, (x, y), (x+w, y+h), (0, 255, 0), 2)
        cv2.putText(image, clas, (x, y-10), cv2.FONT_HERSHEY_SIMPLEX, 0.9, (36,255,12), 2)

# Get a sorted list of all image files in the "dataset_Dopey" directory
image_files = sorted([f for f in os.listdir(name_of_ds_folder) if f.endswith('.png')])

# Display each image in turn, drawing the bounding boxes
for image_file in image_files:
    image = cv2.imread(os.path.join(name_of_ds_folder, image_file))
    if image_file in annotations:
        draw_bboxes(image, annotations[image_file])
    cv2.imshow('Image', image)
    cv2.waitKey(0)  # Wait for a key press before moving on to the next image

cv2.destroyAllWindows()
